import { createContext, useContext, useEffect, useReducer } from "react";
import logger from "use-reducer-logger";

// Define the shape of the state object
type AuthState = {
  authToken: string | null;
  error: string | null;
  isLoading: boolean;
  isLoggedIn: boolean;
};

// Define the shape of the action object
type AuthAction =
  | { type: "LOGIN_REQUEST" }
  | { type: "LOGIN_SUCCESS"; payload: string }
  | { type: "LOGIN_FAILURE"; payload: string }
  | { type: "LOGOUT" };

// Define the initial state
const initialAuthState: AuthState = {
  authToken: null,
  error: null,
  isLoading: false,
  isLoggedIn: false,
};

interface AuthContextType {
  authState: AuthState;
  dispatch: React.Dispatch<AuthAction>;
}

export const AuthContext = createContext<AuthContextType>({
  authState: initialAuthState,
  dispatch: () => null,
});

// const authReducer = (state: AuthState, action: AuthAction) => {
const authReducer: React.Reducer<AuthState, AuthAction> = (state, action) => {
  switch (action.type) {
    case "LOGIN_REQUEST":
      return { ...state, isLoading: true, error: null };
    case "LOGIN_SUCCESS":
      // Store the token in sessionStorage
      sessionStorage.setItem("authToken", action.payload);
      console.log(
        "isLoggedIn is now true in LOGIN_SUCCESS. uthToken is:",
        action.payload
      );
      return {
        ...state,
        authToken: action.payload,
        error: null,
        isLoading: false,
        isLoggedIn: true,
      };
    case "LOGIN_FAILURE":
      sessionStorage.removeItem("authToken");
      return { ...state, error: action.payload, isLoading: false };
    case "LOGOUT":
      // Remove the token from sessionStorage
      sessionStorage.removeItem("authToken");
      return {
        ...state,
        authToken: null,
        error: null,
        isLoading: false,
        isLoggedIn: false,
      };
    default:
      return state;
  }
};

// interface AuthProviderProps {
//   isLoggedIn: boolean;
//   setIsLoggedIn: (value: boolean) => void;
// }

interface AuthProviderProps {
  children: React.ReactNode;
  initialAuthState?: AuthState;

  isLoggedIn: boolean;
  setIsLoggedIn: (value: boolean) => void;
}

const initialAuthStateDefault: AuthState = {
  authToken: null,
  error: null,
  isLoading: false,
  isLoggedIn: false,
};

export const AuthProvider: React.FC<AuthProviderProps> = ({
  children,
  isLoggedIn,
  setIsLoggedIn,
  initialAuthState = initialAuthStateDefault,
}) => {
  const [authState, dispatch] = useReducer(
    logger(authReducer),
    // authReducer,
    initialAuthState
  );

  // console.log("authToken in AuthProvider:", initialAuthState.authToken);
  useEffect(() => {
    const authToken = sessionStorage.getItem("authToken") ?? "";
    if (authToken) {
      dispatch({ type: "LOGIN_SUCCESS", payload: authToken });
      setIsLoggedIn(true);
    } else {
      setIsLoggedIn(false);
    }
  }, [setIsLoggedIn]);
  
  return (
    <AuthContext.Provider value={{ authState, dispatch }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuthContext = () => useContext(AuthContext);
